package resh.connect.mycall.client;

import javafx.application.Application;
import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.image.Image;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import resh.connect.mycall.client.model.Participant;

import java.util.*;
import java.util.concurrent.*;

public class ClientApplication extends Application {

    private TextField ipField, portField, keyField, nicknameField;
    private ChoiceBox<String> roomChoiceBox;
    private ToggleButton micToggle, roomConnectButton;
    private ListView<Participant> participantsList;
    private Label statusLabel;
    private Button serverConnectButton;
    private Label connectedRoomLabel;

    private ObservableList<String> availableRooms = FXCollections.observableArrayList();
    private ObservableList<Participant> participants = FXCollections.observableArrayList();

    private boolean serverConnected = false;
    private boolean roomConnected = false;
    private String connectedRoom = null; // –ö–æ–º–Ω–∞—Ç–∞, –∫ –∫–æ—Ç–æ—Ä–æ–π —Ä–µ–∞–ª—å–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã

    private ScheduledExecutorService scheduler;

    @Override
    public void start(Stage primaryStage) {
        primaryStage.setTitle("MyCall Client");

        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∫–æ–Ω–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        Image appIcon = new Image(getClass().getResourceAsStream("/resh.ico"));
        primaryStage.getIcons().add(appIcon);
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É –¥–ª—è –ø–∞–Ω–µ–ª–∏ –∑–∞–¥–∞—á Windows —á–µ—Ä–µ–∑ AWT Taskbar API
        if (java.awt.Taskbar.isTaskbarSupported()) {
            java.awt.Taskbar taskbar = java.awt.Taskbar.getTaskbar();
            try {
                java.awt.Image awtImage = java.awt.Toolkit.getDefaultToolkit().getImage(getClass().getResource("/resh.ico"));
                taskbar.setIconImage(awtImage);
            } catch (Exception e) {
                System.err.println("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–∫–æ–Ω–∫–∏ –≤ –ø–∞–Ω–µ–ª—å –∑–∞–¥–∞—á: " + e.getMessage());
            }
        }

        ipField = new TextField();
        ipField.setPromptText("IP —Å–µ—Ä–≤–µ—Ä–∞");
        ipField.setPrefWidth(200);

        portField = new TextField();
        portField.setPromptText("–ü–æ—Ä—Ç");
        portField.setPrefWidth(80);

        HBox ipPortBox = new HBox(10, ipField, portField);

        keyField = new TextField();
        keyField.setPromptText("–ö–ª—é—á –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è");

        nicknameField = new TextField();
        nicknameField.setPromptText("–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º");

        roomChoiceBox = new ChoiceBox<>();
        roomChoiceBox.setItems(availableRooms);

        micToggle = new ToggleButton("–í—ã–∫–ª—é—á–∏—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω");
        micToggle.setSelected(true);
        micToggle.setVisible(false);
        micToggle.setDisable(true);

        micToggle.selectedProperty().addListener((obs, wasSelected, isSelected) -> {
            if (isSelected) {
                micToggle.setText("–í—ã–∫–ª—é—á–∏—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω");
                enableMicrophone();
            } else {
                micToggle.setText("–í–∫–ª—é—á–∏—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω");
                disableMicrophone();
            }
        });

        serverConnectButton = new Button("–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É");

        roomConnectButton = new ToggleButton("–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ");
        roomConnectButton.setDisable(true);

        connectedRoomLabel = new Label();

        HBox roomControlBox = new HBox(10, roomConnectButton, connectedRoomLabel);

        participantsList = new ListView<>();
        participantsList.setItems(participants);

        participantsList.setCellFactory(lv -> new ListCell<Participant>() {
            @Override
            protected void updateItem(Participant item, boolean empty) {
                super.updateItem(item, empty);
                if (empty || item == null) {
                    setText(null);
                    setGraphic(null);
                } else {
                    String micStatus = item.isMicOn() ? "üé§" : "üîá";
                    setText(item.getNickname() + " " + micStatus);
                }
            }
        });

        statusLabel = new Label("–°—Ç–∞—Ç—É—Å: –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω");

        VBox root = new VBox(10);
        root.setPadding(new Insets(15));
        root.getChildren().addAll(
                new Label("IP –∞–¥—Ä–µ—Å –∏ –ø–æ—Ä—Ç:"),
                ipPortBox,
                new Label("–ö–ª—é—á:"), keyField,
                new Label("–ù–∏–∫–Ω–µ–π–º:"), nicknameField,
                serverConnectButton,
                new Label("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–Ω–∞—Ç—É:"), roomChoiceBox,
                roomControlBox,
                new Label("–£—á–∞—Å—Ç–Ω–∏–∫–∏:"), participantsList,
                micToggle,
                statusLabel);

        serverConnectButton.setOnAction(e -> {
            if (!serverConnected) {
                connectToServer();
            } else {
                disconnectFromServer();
            }
        });

        roomConnectButton.setOnAction(e -> {
            if (!roomConnected) {
                connectToRoom();
            } else {
                disconnectFromRoom();
            }
        });

        roomChoiceBox.getSelectionModel().selectedItemProperty().addListener((obs, oldRoom, newRoom) -> {
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)
            if (serverConnected && newRoom != null) {
                updateParticipantsForRoom(newRoom);
            }
        });

        Scene scene = new Scene(root, 450, 600);
        primaryStage.setScene(scene);
        primaryStage.show();
    }

    private void connectToServer() {
        String ip = ipField.getText().trim();
        String port = portField.getText().trim();
        String key = keyField.getText().trim();
        String nickname = nicknameField.getText().trim();

        if (ip.isEmpty() || port.isEmpty() || key.isEmpty() || nickname.isEmpty()) {
            statusLabel.setText("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ IP, –ø–æ—Ä—Ç, –∫–ª—é—á –∏ –Ω–∏–∫–Ω–µ–π–º.");
            return;
        }

        int portNumber;
        try {
            portNumber = Integer.parseInt(port);
            if (portNumber < 1 || portNumber > 65535) throw new NumberFormatException();
        } catch (NumberFormatException e) {
            statusLabel.setText("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ—Ä—Ç–∞.");
            return;
        }

        statusLabel.setText("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...");
        serverConnected = true;
        serverConnectButton.setText("–û—Ç–∫–ª—é—á–∏—Ç—å—Å—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞");

        loadRoomsFromServer();
        roomConnectButton.setDisable(false);
        statusLabel.setText("–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É " + ip + ":" + port + " –∫–∞–∫ " + nickname);

        ipField.setDisable(true);
        portField.setDisable(true);
        keyField.setDisable(true);
        nicknameField.setDisable(true);

        startParticipantsAutoUpdate();
    }

    private void disconnectFromServer() {
        stopParticipantsAutoUpdate();

        if (roomConnected) {
            disconnectFromRoom();
        }

        serverConnected = false;
        serverConnectButton.setText("–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É");
        roomConnectButton.setDisable(true);
        roomConnectButton.setSelected(false);
        roomConnectButton.setText("–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ");
        connectedRoomLabel.setText("");

        micToggle.setVisible(false);
        micToggle.setDisable(true);
        micToggle.setSelected(false);
        participants.clear();
        availableRooms.clear();
        statusLabel.setText("–û—Ç–∫–ª—é—á–µ–Ω –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞");

        ipField.setDisable(false);
        portField.setDisable(false);
        keyField.setDisable(false);
        nicknameField.setDisable(false);
    }

    private void connectToRoom() {
        String room = roomChoiceBox.getValue();
        if (room == null) {
            statusLabel.setText("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.");
            return;
        }
        roomConnected = true;
        connectedRoom = room;
        roomConnectButton.setText("–û—Ç–∫–ª—é—á–∏—Ç—å—Å—è –æ—Ç –∫–æ–º–Ω–∞—Ç—ã");
        updateConnectedRoomLabel();

        statusLabel.setText("–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–æ–º–Ω–∞—Ç–µ '" + room + "'");

        micToggle.setVisible(true);
        micToggle.setDisable(false);
        micToggle.setSelected(true);
        micToggle.setText("–í—ã–∫–ª—é—á–∏—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω");
        enableMicrophone();
    }

    private void disconnectFromRoom() {
        roomConnected = false;
        connectedRoom = null;
        roomConnectButton.setText("–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ");
        updateConnectedRoomLabel();

        participants.clear();
        statusLabel.setText("–û—Ç–∫–ª—é—á–µ–Ω –æ—Ç –∫–æ–º–Ω–∞—Ç—ã");

        micToggle.setVisible(false);
        micToggle.setDisable(true);
        micToggle.setSelected(false);
        disableMicrophone();
    }

    private void updateConnectedRoomLabel() {
        if (connectedRoom != null && roomConnected) {
            connectedRoomLabel.setText(" (–ü–æ–¥–∫–ª—é—á–µ–Ω –∫: " + connectedRoom + ")");
        } else {
            connectedRoomLabel.setText("");
        }
    }

    private void loadRoomsFromServer() {
        availableRooms.clear();
        availableRooms.addAll("–ì–ª–∞–≤–Ω–∞—è", "–ö–æ–º–Ω–∞—Ç–∞ 1", "–ö–æ–º–Ω–∞—Ç–∞ 2", "–°–≤–æ–±–æ–¥–Ω—ã–π —á–∞—Ç");
        if (!availableRooms.isEmpty()) {
            roomChoiceBox.setValue(availableRooms.get(0));
            updateParticipantsForRoom(availableRooms.get(0));
        }
    }

    private void startParticipantsAutoUpdate() {
        scheduler = Executors.newSingleThreadScheduledExecutor();
        scheduler.scheduleAtFixedRate(() -> {
            if (!serverConnected) return;
            String viewedRoom = roomChoiceBox.getValue();
            if (viewedRoom == null) return;

            List<Participant> updatedParticipants = simulateServerParticipants(viewedRoom);

            Platform.runLater(() -> {
                if (viewedRoom.equals(roomChoiceBox.getValue())) {
                    participants.setAll(updatedParticipants);
                    statusLabel.setText("–û–±–Ω–æ–≤–ª—ë–Ω —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–Ω–∞—Ç—ã '" + viewedRoom + "'");
                }
            });
        }, 0, 5, TimeUnit.SECONDS);
    }

    private void updateParticipantsForRoom(String room) {
        Platform.runLater(() -> {
            List<Participant> updatedParticipants = simulateServerParticipants(room);
            participants.setAll(updatedParticipants);
            statusLabel.setText("–û–±–Ω–æ–≤–ª—ë–Ω —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–Ω–∞—Ç—ã '" + room + "'");
        });
    }

    private void stopParticipantsAutoUpdate() {
        if (scheduler != null && !scheduler.isShutdown()) {
            scheduler.shutdownNow();
        }
    }

    private List<Participant> simulateServerParticipants(String room) {
        Random rand = new Random();
        List<Participant> baseParticipants;

        switch (room) {
            case "–ì–ª–∞–≤–Ω–∞—è" -> baseParticipants = new ArrayList<>(List.of(
                    new Participant("–ê–ª–∏—Å–∞", true),
                    new Participant("–ë–æ–±", false),
                    new Participant("–ö—ç—Ä–æ–ª", true)
            ));
            case "–ö–æ–º–Ω–∞—Ç–∞ 1" -> baseParticipants = new ArrayList<>(List.of(
                    new Participant("–î–∞–≤–∏–¥", false),
                    new Participant("–ï–≤–∞", true)
            ));
            case "–ö–æ–º–Ω–∞—Ç–∞ 2" -> baseParticipants = new ArrayList<>(List.of(
                    new Participant("–§—Ä—ç–Ω–∫", true)
            ));
            case "–°–≤–æ–±–æ–¥–Ω—ã–π —á–∞—Ç" -> baseParticipants = new ArrayList<>(List.of(
                    new Participant("–ì–∞—Ä–∏", false),
                    new Participant("–•–µ–ª–µ–Ω", false),
                    new Participant("–ò–≤–∞–Ω", true)
            ));
            default -> baseParticipants = new ArrayList<>(List.of(
                    new Participant("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", true)
            ));
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–±—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º –∫–æ–º–Ω–∞—Ç—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        if (roomConnected && connectedRoom != null && room.equals(connectedRoom)) {
            String myNick = nicknameField.getText().trim();
            boolean myMicStatus = micToggle.isSelected();
            boolean containsMe = baseParticipants.stream().anyMatch(p -> p.getNickname().equals(myNick));
            if (!myNick.isEmpty() && !containsMe) {
                baseParticipants.add(new Participant(myNick, myMicStatus));
            }
        }

        // –°–ª—É—á–∞–π–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        if (rand.nextBoolean()) {
            baseParticipants.add(new Participant("–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ " + rand.nextInt(100), rand.nextBoolean()));
        }

        return baseParticipants;
    }

    private void enableMicrophone() {
        System.out.println("–ú–∏–∫—Ä–æ—Ñ–æ–Ω –≤–∫–ª—é—á–µ–Ω");
    }

    private void disableMicrophone() {
        System.out.println("–ú–∏–∫—Ä–æ—Ñ–æ–Ω –≤—ã–∫–ª—é—á–µ–Ω");
    }

    @Override
    public void stop() {
        stopParticipantsAutoUpdate();
    }

    public static void main(String[] args) {
        launch(args);
    }
}
